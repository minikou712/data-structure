#include "sqlist.h"

// 题目09： 给定三个有序数组 A、B、C，长度均为 n，
// 且均为无重复元素的递增序列，请设计一个时间上尽可能高效的算法
// ，选取输出同时存在于这三个序列中的所有元素。
// 例如，数组 A 为 {1, 2, 3}，数组 B 为 {2, 3, 4}，数组 C 为 {-1, 0, 2}，则输出 2。
// 要求：
// 给出算法的基本设计思想。
// 根据设计思想，采用 C 或 C++ 语言描述算法，关键之处给出注释。
// 说明你的算法的时间复杂度和空间复杂度。

// 算法思想：使用三指针算法，同时遍历三个数组，找到相同的元素。
// 不断比较三个指针所指向的元素，
// 如果三个元素相等，则输出该元素，并将三个指针都向后移动
// 如果三个元素不相等，则除了最大的都移动。
void sameKey(int A[], int B[], int C[], int n)
{
    int i = 0, j = 0, k = 0;
    while (i < n && j < n && k < n)
    {
        int maxValue = max(A[i], max(B[j], C[k]));
        if(A[i] == B[j] && B[j] == C[k])
        {
            cout << A[i] << " "; // 输出相同的元素
            i++;
            j++;
            k++;
        }
        else if (A[i] < maxValue)
        {
            i++; // A[i]不是最大值，移动指针i
        }
        else if (B[j] < maxValue)
        {
            j++; // B[j]不是最大值，移动指针j
        }
        else
        {
            k++; // C[k]不是最大值，移动指针k
        }
    }
}