#include "sqlist.h"

// 题目13：【2018统考真题】

// 给定一个含n(n≥1)个整数的数组，请设计一个在时间上尽可能高效的算法，
// 找出数组中未出现的最小正整数。
// 例如，数组{-5, 3, 2, 3}中未出现的最小正整数是1；
// 数组{1, 2, 3}中未出现的最小正整数是4。

// 要求：
// 给出算法的基本设计思想。
// 根据设计思想，采用C或C++语言描述算法，关键之处给出注释。
// 说明你所设计算法的时间复杂度和空间复杂度。

// 思路：
// 1. 用数组模拟哈希表，记录每个正整数的出现情况。
// 2. 遍历数组，找到第一个未出现的正整数。
int findMissMin(int A[], int n)
{
    int hash[n + 1] = {0}; // 哈希表，记录正整数的出现情况
    for (int i = 0; i < n; i++)
    {
        if (A[i] > 0 && A[i] <= n)
        {
            hash[A[i]] = 1; // 标记正整数出现
        }
    }
    for (int i = 1; i <= n; i++)
    {
        if (hash[i] == 0)
        {
            return i; // 返回第一个未出现的正整数
        }
    }
    return n + 1; // 如果1到n的正整数都出现，返回n+1
}